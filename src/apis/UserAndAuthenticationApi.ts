/* tslint:disable */
/* eslint-disable */
/**
 * RealWorld Conduit API
 * Conduit API documentation
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActualizarUsuarioActualRequest,
  CrearUsuarioRequest,
  GenericErrorModel,
  IniciarSesionRequest,
  InlineObject6,
} from '../models/index';
import {
    ActualizarUsuarioActualRequestFromJSON,
    ActualizarUsuarioActualRequestToJSON,
    CrearUsuarioRequestFromJSON,
    CrearUsuarioRequestToJSON,
    GenericErrorModelFromJSON,
    GenericErrorModelToJSON,
    IniciarSesionRequestFromJSON,
    IniciarSesionRequestToJSON,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
} from '../models/index';

export interface ActualizarUsuarioActualOperationRequest {
    body: ActualizarUsuarioActualRequest;
}

export interface CrearUsuarioOperationRequest {
    body: CrearUsuarioRequest;
}

export interface IniciarSesionOperationRequest {
    body: IniciarSesionRequest;
}

/**
 * 
 */
export class UserAndAuthenticationApi extends runtime.BaseAPI {

    /**
     * Updated user information for current user
     * Update current user
     */
    async actualizarUsuarioActualRaw(requestParameters: ActualizarUsuarioActualOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineObject6>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling actualizarUsuarioActual().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Token authentication
        }


        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActualizarUsuarioActualRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject6FromJSON(jsonValue));
    }

    /**
     * Updated user information for current user
     * Update current user
     */
    async actualizarUsuarioActual(requestParameters: ActualizarUsuarioActualOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineObject6> {
        const response = await this.actualizarUsuarioActualRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user
     */
    async crearUsuarioRaw(requestParameters: CrearUsuarioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineObject6>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling crearUsuario().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CrearUsuarioRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject6FromJSON(jsonValue));
    }

    /**
     * Register a new user
     */
    async crearUsuario(requestParameters: CrearUsuarioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineObject6> {
        const response = await this.crearUsuarioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login for existing user
     * Existing user login
     */
    async iniciarSesionRaw(requestParameters: IniciarSesionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineObject6>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling iniciarSesion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IniciarSesionRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject6FromJSON(jsonValue));
    }

    /**
     * Login for existing user
     * Existing user login
     */
    async iniciarSesion(requestParameters: IniciarSesionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineObject6> {
        const response = await this.iniciarSesionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the currently logged-in user
     * Get current user
     */
    async obtenerUsuarioActualRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineObject6>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Token authentication
        }


        let urlPath = `/user`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject6FromJSON(jsonValue));
    }

    /**
     * Gets the currently logged-in user
     * Get current user
     */
    async obtenerUsuarioActual(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineObject6> {
        const response = await this.obtenerUsuarioActualRaw(initOverrides);
        return await response.value();
    }

}
