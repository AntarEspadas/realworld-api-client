/* tslint:disable */
/* eslint-disable */
/**
 * RealWorld Conduit API
 * Documentaci√≥n del API de Conduit
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateArticleCommentRequest,
  GenericErrorModel,
  InlineObject1,
  InlineObject2,
} from '../models/index';
import {
    CreateArticleCommentRequestFromJSON,
    CreateArticleCommentRequestToJSON,
    GenericErrorModelFromJSON,
    GenericErrorModelToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
} from '../models/index';

export interface CreateArticleCommentOperationRequest {
    slug: string;
    comment: CreateArticleCommentRequest;
}

export interface DeleteArticleCommentRequest {
    slug: string;
    id: number;
}

export interface GetArticleCommentsRequest {
    slug: string;
}

/**
 * 
 */
export class CommentsApi extends runtime.BaseAPI {

    /**
     * Create a comment for an article. Auth is required
     * Create a comment for an article
     */
    async createArticleCommentRaw(requestParameters: CreateArticleCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineObject1>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling createArticleComment().'
            );
        }

        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling createArticleComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Token authentication
        }


        let urlPath = `/articles/{slug}/comments`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateArticleCommentRequestToJSON(requestParameters['comment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject1FromJSON(jsonValue));
    }

    /**
     * Create a comment for an article. Auth is required
     * Create a comment for an article
     */
    async createArticleComment(requestParameters: CreateArticleCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineObject1> {
        const response = await this.createArticleCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a comment for an article. Auth is required
     * Delete a comment for an article
     */
    async deleteArticleCommentRaw(requestParameters: DeleteArticleCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling deleteArticleComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteArticleComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Token authentication
        }


        let urlPath = `/articles/{slug}/comments/{id}`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a comment for an article. Auth is required
     * Delete a comment for an article
     */
    async deleteArticleComment(requestParameters: DeleteArticleCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteArticleCommentRaw(requestParameters, initOverrides);
    }

    /**
     * Get the comments for an article. Auth is optional
     * Get comments for an article
     */
    async getArticleCommentsRaw(requestParameters: GetArticleCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineObject2>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getArticleComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/articles/{slug}/comments`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject2FromJSON(jsonValue));
    }

    /**
     * Get the comments for an article. Auth is optional
     * Get comments for an article
     */
    async getArticleComments(requestParameters: GetArticleCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineObject2> {
        const response = await this.getArticleCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
